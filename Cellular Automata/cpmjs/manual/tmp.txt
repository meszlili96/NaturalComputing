# Your First Simulation

This tutorial will show you how to build a simple simulation in the web browser
or in a nodejs script. Choose either
[Set up a simulation in the web browser](#set-up-a-simulation-in-the-web-browser)
or [Set up a simulation in nodejs](#set-up-a-simulation-in-nodejs) to get the
required template code, and then see
[Writing your simulation](#writing-your-simulation) to start using CPMjs in the
environment of your choice.

The simulation we will build is a simple Ising model:

<div>
<iframe src="asset/IsingModel.html" width="400px" height="500px"> </iframe>
</div>

## Set up a simulation in the web browser

One way to use CPMjs is to build a simulation in HTML, to open directly in
your favourite web browser (as long as that favourite web browser is not
Internet Explorer). The advantage of this method is that it allows you to
visualize the simulation immediately, and that you can easily explore the
effect of changing parameters in this manner. However, if you wish to run a
simulation and store output to your computer, a simulation using nodejs may be
more appropriate â€“ see [Set up a simulation in nodejs](#set-up-a-simulation-in-nodejs)
for details.

Unfortunately, writing an HTML page requires quite some boilerplate code. You
can mostly just copy-paste this for every simulation you build, but let's go
through it step by step so you know which parts you may have to adapt. If you
are familiar with HTML, you may want to skip to the last step and just copy the
template code.

### Step 1 : Create a basic HTML page

A very simple html page looks like this:

```$xslt
<!DOCTYPE html>
<html>
<head> </head>
<body> </body>
</html>
```

The `<html>` tag shows where the page starts, and `</html>` shows where it ends.
The page consists of a *header*, which starts at `<head>` and ends at `</head>`,
and a *body*, starting at `<body>` and ending at `</body>`. (In general,
anything you place in your HTML file starts with `<something>` and ends with
`</something>`).

### Step 2 : Configure the header

The header of the HTML page is the place that contains some meta-information
about that page, and will also contain the simulation code.

First, we will expand the header code above:

```$xslt
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>PageTitle</title>
</head>
```

The additional code just includes some document settings into the header
that you will rarely need to change. The only thing you may want to change is
the `<title>PageTitle</title>`, where you set the title that will be displayed
in the open tab in your web browser when you open the page.

### Step 3 : Add JavaScript

We will now add some JavaScript code to the header part of the page:

```$xslt
<head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PageTitle</title>
<script src="path/to/cpmjs/build/cpm.js"></script>
<script>
"use strict"
// Simulation code will go here:

</script>
</head>
```

The first script just loads the CPMjs package for HTML, which is stored in
`cpmjs/build/cpm.js`. The second script is where your actual simulation code
will go later in [Writing your simulation](#writing-your-simulation).

### Step 4: Write the body

Finally, we make some changes to the body of the page:

```$xslt
<body onload="initialize()">
<h1>Your Page Title</h1>
<p>
Description of your page.
</p>
</body>
```




```$xslt
<!-- Page setup and title -->
<!DOCTYPE html>
<html lang="en">
<head><meta http-equiv="Content-Type" content="text/html;
charset=UTF-8">
<title>PageTitle</title>

<!-- Sourcing the cpm build -->
<script src="../../build/cpm.js"></script>
<script>
"use strict"

/Applications /Library /Network /System /Users /Volumes /bin /cores /dev /etc /home /installer.failurerequests /net /opt /private /sbin /tmp /usr /var --- Simulation code here. --- app/ benchmarks/ build/ docs/ examples-old/ examples/ lib/ manual/ misc/ node_modules/ spec/ src/ unittests/ video-capture/ viz/ 13
</script>
</head>
<body>
<h1>Your Page Title</h1>
<p>
Description of your page.
</p>
</body>
</html>
```

## Set up a simulation in nodejs

## Writing your simulation

